/**
 * Exhibit Editor - Edit exhibit IDs and titles for uploaded files
 * 
 * Allows users to rename auto-generated exhibit IDs and titles
 * with inline editing and validation.
 */
import React, { useState } from 'react';
import {
  Box,
  IconButton,
  TextField,
  Typography,
  Chip,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Alert,
  InputAdornment
} from '@mui/material';
import {
  Edit as EditIcon,
  Check as CheckIcon,
  Close as CloseIcon,
  AutoAwesome as AIIcon,
  Warning as WarningIcon
} from '@mui/icons-material';
import { supabase } from '../../lib/supabase';
import useAppStore from '../../store';

interface ExhibitEditorProps {
  fileId: string;
  exhibitId: string;
  exhibitTitle: string;
  autoGenerated?: boolean;
  onUpdate?: (exhibitId: string, exhibitTitle: string) => void;
}

export const ExhibitEditor: React.FC<ExhibitEditorProps> = ({
  fileId,
  exhibitId: initialExhibitId,
  exhibitTitle: initialExhibitTitle,
  autoGenerated = false,
  onUpdate
}) => {
  const { selectedProjectId } = useAppStore(state => ({ selectedProjectId: state.selectedProjectId }));
  
  const [isEditingId, setIsEditingId] = useState(false);
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [editedId, setEditedId] = useState(initialExhibitId);
  const [editedTitle, setEditedTitle] = useState(initialExhibitTitle);
  const [error, setError] = useState<string | null>(null);
  const [isValidating, setIsValidating] = useState(false);

  // Validate exhibit ID format and uniqueness
  const validateExhibitId = async (newId: string): Promise<boolean> => {
    if (!newId || newId.trim().length === 0) {
      setError('Exhibit ID cannot be empty');
      return false;
    }

    // Check format (letter followed by numbers)
    if (!/^[A-Z][0-9]+$/.test(newId.trim())) {
      setError('Exhibit ID must be a letter followed by numbers (e.g., A1, D5, P12)');
      return false;
    }

    // Check uniqueness within project
    const { data: existingFiles } = await supabase
      .from('files')
      .select('id')
      .eq('project_id', selectedProjectId)
      .eq('exhibit_id', newId.trim())
      .neq('id', fileId);

    if (existingFiles && existingFiles.length > 0) {
      setError(`Exhibit ID "${newId}" is already used in this project`);
      return false;
    }

    setError(null);
    return true;
  };

  const handleSaveId = async () => {
    if (!editedId) return;
    
    setIsValidating(true);
    const isValid = await validateExhibitId(editedId);
    setIsValidating(false);
    
    if (!isValid) return;

    try {
      const { error: updateError } = await supabase
        .from('files')
        .update({ 
          exhibit_id: editedId.trim(),
          exhibit_auto_generated: false 
        })
        .eq('id', fileId);

      if (updateError) throw updateError;

      setIsEditingId(false);
      onUpdate?.(editedId.trim(), editedTitle);
    } catch (error) {
      console.error('Error updating exhibit ID:', error);
      setError('Failed to update exhibit ID');
    }
  };

  const handleSaveTitle = async () => {
    if (!editedTitle || editedTitle.trim().length === 0) {
      setError('Exhibit title cannot be empty');
      return;
    }

    try {
      const { error: updateError } = await supabase
        .from('files')
        .update({ 
          exhibit_title: editedTitle.trim(),
          exhibit_auto_generated: false 
        })
        .eq('id', fileId);

      if (updateError) throw updateError;

      setIsEditingTitle(false);
      setError(null);
      onUpdate?.(editedId, editedTitle.trim());
    } catch (error) {
      console.error('Error updating exhibit title:', error);
      setError('Failed to update exhibit title');
    }
  };

  const handleCancelId = () => {
    setEditedId(initialExhibitId);
    setIsEditingId(false);
    setError(null);
  };

  const handleCancelTitle = () => {
    setEditedTitle(initialExhibitTitle);
    setIsEditingTitle(false);
    setError(null);
  };

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
      {/* Exhibit ID Editor */}
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Typography variant="caption" color="text.secondary" sx={{ minWidth: 60 }}>
          Exhibit:
        </Typography>
        
        {isEditingId ? (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flex: 1 }}>
            <TextField
              value={editedId}
              onChange={(e) => setEditedId(e.target.value.toUpperCase())}
              size="small"
              placeholder="e.g., A1, D5, P12"
              error={!!error}
              helperText={error}
              sx={{ width: 120 }}
              InputProps={{
                endAdornment: isValidating ? (
                  <InputAdornment position="end">
                    <AIIcon sx={{ fontSize: 16, color: 'primary.main' }} />
                  </InputAdornment>
                ) : null
              }}
            />
            <IconButton size="small" onClick={handleSaveId} color="primary">
              <CheckIcon />
            </IconButton>
            <IconButton size="small" onClick={handleCancelId}>
              <CloseIcon />
            </IconButton>
          </Box>
        ) : (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flex: 1 }}>
            <Chip
              label={initialExhibitId}
              size="small"
              color="primary"
              variant="outlined"
              icon={autoGenerated ? <AIIcon /> : undefined}
            />
            <Tooltip title="Edit exhibit ID">
              <IconButton size="small" onClick={() => setIsEditingId(true)}>
                <EditIcon fontSize="small" />
              </IconButton>
            </Tooltip>
            {autoGenerated && (
              <Tooltip title="Auto-generated by AI">
                <AIIcon sx={{ fontSize: 16, color: 'primary.main' }} />
              </Tooltip>
            )}
          </Box>
        )}
      </Box>

      {/* Exhibit Title Editor */}
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Typography variant="caption" color="text.secondary" sx={{ minWidth: 60 }}>
          Title:
        </Typography>
        
        {isEditingTitle ? (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flex: 1 }}>
            <TextField
              value={editedTitle}
              onChange={(e) => setEditedTitle(e.target.value)}
              size="small"
              placeholder="Enter exhibit title"
              multiline
              maxRows={2}
              sx={{ flex: 1 }}
              error={!!error}
              helperText={error}
            />
            <IconButton size="small" onClick={handleSaveTitle} color="primary">
              <CheckIcon />
            </IconButton>
            <IconButton size="small" onClick={handleCancelTitle}>
              <CloseIcon />
            </IconButton>
          </Box>
        ) : (
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flex: 1 }}>
            <Typography 
              variant="body2" 
              sx={{ 
                flex: 1,
                fontStyle: autoGenerated ? 'italic' : 'normal',
                color: autoGenerated ? 'text.secondary' : 'text.primary'
              }}
            >
              {initialExhibitTitle}
            </Typography>
            <Tooltip title="Edit exhibit title">
              <IconButton size="small" onClick={() => setIsEditingTitle(true)}>
                <EditIcon fontSize="small" />
              </IconButton>
            </Tooltip>
          </Box>
        )}
      </Box>

      {/* Auto-generated warning */}
      {autoGenerated && (
        <Alert severity="info" sx={{ mt: 1 }}>
          <Typography variant="caption">
            This exhibit ID and title were automatically generated by AI. Click edit to customize them.
          </Typography>
        </Alert>
      )}
    </Box>
  );
};

export default ExhibitEditor;